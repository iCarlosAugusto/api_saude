generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  email             String      @unique
  identification    String      @unique
  password          String
  photo             String?
  phoneNumber       String
  name              String
  consults          Consult[]

  @@map("users")
}

model Partner {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  identification String    @unique
  name           String
  email          String
  photo          String?
  password       String
  specialties    String
  address        String
  phoneNumber    String
  servicePrice   String
  jobDescription String
  consults       Consult[]
  services       Service[]

  @@map("partners")
}

model Company {
  id             String   @id @default(uuid())
  name           String
  availableDay   String
  classes        Class[]
}

model Class {
  id            String    @id @default(uuid())
  name          String
  lots          Int
  startAt       String
  companyId     String
  company       Company   @relation(fields: [companyId], references: [id])
}


model Admin {
  id               String     @id @default(uuid())
  createdAt        DateTime   @default(now())
  identification   String
  name             String
  email            String
  phoneNumber      String
  photo            String
  password         String
}

model Service {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  name          String
  description   String
  price         String
  partnerName   String
  partnerPhoto  String
  specialitie   String
  address       String
  partnerId     String
  bannerImage   String
  consult       Consult[]
  partner       Partner   @relation(fields: [partnerId], references: [id])

  @@map("services")
}

model Consult {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  partnerId  String
  clientId   String
  serviceId  String
  isFinished Boolean  @default(false)
  service    Service  @relation(fields: [serviceId], references: [id])
  client     User     @relation(fields: [clientId], references: [id])
  partner    Partner  @relation(fields: [partnerId], references: [id])

  @@map("consults")
}
