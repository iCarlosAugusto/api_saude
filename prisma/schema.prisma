generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Partner {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  identification String    @unique
  name           String
  email          String
  photo          String?
  password       String
  specialties    String
  address        String
  phoneNumber    String
  servicePrice   String
  jobDescription String
  consults       Consult[]
  services       Service[]
  companies      Company[]
  clients        Client[]

  @@map("partners")
}

model Company {
  id           String  @id @default(uuid())
  name         String
  availableDay String
  bannerImage  String
  classes      Class[]
  partnerId    String
  partner      Partner @relation(fields: [partnerId], references: [id])
}

model Admin {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  identification String
  name           String
  email          String
  phoneNumber    String
  photo          String
  password       String
}

model Service {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  name         String
  description  String
  price        String
  partnerName  String
  partnerPhoto String
  specialitie  String
  address      String
  partnerId    String
  bannerImage  String
  consult      Consult[]
  partner      Partner   @relation(fields: [partnerId], references: [id])

  @@map("services")
}

model Consult {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  partnerId  String
  clientId   String
  serviceId  String
  isFinished Boolean  @default(false)
  service    Service  @relation(fields: [serviceId], references: [id])
  client     Client   @relation(fields: [clientId], references: [id])
  partner    Partner  @relation(fields: [partnerId], references: [id])

  @@map("consults")
}

model Client {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  email          String    @unique
  identification String    @unique
  password       String
  photo          String?
  phoneNumber    String
  name           String
  consults       Consult[]
  partner        Partner  @relation(fields: [partnerId], references: [id])
  classes        ClientsOnClasses[]
  partnerId      String

  @@map("client")
}

model Class {
  id          String  @id @default(uuid())
  name        String
  description String
  lots        Int
  startAt     String
  address     String
  place       String
  price       String
  bannerImage String
  teacherName String
  companyId   String
  students    ClientsOnClasses[]
  company     Company @relation(fields: [companyId], references: [id])
}

model ClientsOnClasses {
  client       Client   @relation(fields: [clientId], references: [id])
  clientId     String // relation scalar field (used in the `@relation` attribute above)
  class        Class    @relation(fields: [classId], references: [id])
  classId      String // relation scalar field (used in the `@relation` attribute above)
  assignedAt   DateTime @default(now())

  @@id([classId, clientId])
}