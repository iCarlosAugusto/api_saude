generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Partner {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  identification String    @unique
  regiterCode    String    @unique
  name           String
  email          String
  photo          String?
  password       String
  phoneNumber    String
  companies      Company[]
  clients        Client[]
  consults       Consult[]
  services       Service[]

  @@map("partners")
}

model Company {
  id           String   @id @default(uuid())
  name         String
  availableDay String[]
  bannerImage  String
  partnerId    String
  classes      Class[]
  partner      Partner  @relation(fields: [partnerId], references: [id])
}

model Admin {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  identification String
  name           String
  email          String
  phoneNumber    String
  photo          String
  password       String
}

model Service {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  name         String
  description  String
  price        String
  partnerName  String
  partnerPhoto String
  partnerEmail String
  specialitie  String
  address      String
  partnerId    String
  bannerImage  String?
  startAt      String
  endAt        String
  consult      Consult[]
  partner      Partner   @relation(fields: [partnerId], references: [id])

  @@map("services")
}

model Consult {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  partnerId  String
  clientId   String
  serviceId  String
  isFinished Boolean  @default(false)
  date       String
  client     Client   @relation(fields: [clientId], references: [id])
  partner    Partner  @relation(fields: [partnerId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])

  @@map("consults")
}

model Client {
  id             String             @id @default(uuid())
  createdAt      DateTime           @default(now())
  email          String             @unique
  identification String             @unique
  password       String
  isPremium      Boolean           @default(false)
  photo          String?
  phoneNumber    String
  name           String
  partnerId      String
  classes        Class[]
  partner        Partner            @relation(fields: [partnerId], references: [id])
  consults       Consult[]

  @@map("client")
}

model Class {
  id            String             @id @default(uuid())
  name          String
  description   String
  lots          Int
  startAt       String
  dateTimestamp String
  address       String
  place         String
  bannerImage   String?
  teacherName   String
  companyId     String
  date          String
  company       Company            @relation(fields: [companyId], references: [id])
  clients      Client[]
}

model News {
  id            String             @id @default(uuid())
  title         String
  description   String
  imageUrl         String
}